#
# Actions...
#
MENU_SYSTEM=System
MENU_PROJECT=Project
MENU_RECENT=Recent files
MENU_HELP=Help
NEW=New
OPEN=Open...
SAVE=Save
SAVE_AS=Save As...
EXIT=Exit
COMPILE=Compile...
RUNEXE=Run the exe...
ABOUT=About...
#
# Texts from the panels...
#
SKELETONCHOOSER_LABEL=Skeleton Selection
SKELETONCHOOSER_HELP=A skeleton is an empty wrapper that launches your application. Each skeleton has its own behaviour regarding the application configuration and what is done when no JRE is found on the end-user's computer.<p>Read carefully their descriptions before picking one.
EXECUTABLE_LABEL=Executable Binary
EXECUTABLE_HELP=This is the name given to the executable binary.<br>It must end with the ".exe" suffix. For instance, <tt>myprogram.exe</tt> is just fine.
CURRENTDIR_LABEL=Current Directory
CURRENTDIR_HELP=Define here the directory to be set as the working directory of the the application, when launched. <p>Just leave it empty if you don't need any modification of this value at startup.<p>Typical use of this option is to go up one level when the executable is in a <tt>bin</tt> subdirectory of the program root.<p><b>WARNING</b>: Unlike the other files or directory options, which are all relative to the project file, this value is always relative to the generated executable location. That is, if you set <tt>".."</tt> or "an\\other\\dir" here, the generated wrapper will change to this directory from <u>its</u> own current directory.<p> You can also use the ${EXECUTABLEPATH} keyword, which will be replaced at runtime by the directory of the executable.
CURRENTDIR_FORCEEXEPATH=Sets the executable folder as current directory of the application.
CURRENTDIR_FORCEEXEPATH_HELP=If this option is selected, the current directory of your application is forced to be the directory where the executable is installed. <p>  This is equivalent to setting the "current dir" to "${EXECUTABLEPATH}".
SKELETONPROPERTIES_LABEL=Skeleton Properties
SKELETONPROPERTIES_HELP=The table above shows the properties associated to the selected skeleton. Change the values of the properties to customize the behaviour of the native executable wrapper generated.
ICONLOCATION_LABEL=Executable Icon
ICONLOCATION_HELP=Optionally, you can select an icon to be compiled with the executable. This icon is typically used by the operating system to represent the file.<p>You should prefer .ICO files, as this is the format natively used for Win32 executable images, but <tt>GIF</tt>, <tt>JPEG</tt>, or <tt>PNG</tt> files should work fine, at the expense of an image quality decrease due to the color reduction process.
ARGUMENTS_LABEL=Application Arguments
ARGUMENTS_HELP=Arguments can be passed to the application at launch time.<br>This option allows you to specify default arguments.<p>The expected behaviour of the wrappers is to use those arguments <u>only if none are passed by the user</u> (in other words, they are overloaded by manual arguments).
EMBEDDEDJAR_LABEL=Embedded jar
EMBEDDEDJAR_HELP=You can embed a jar file into the compiled executable. This jar file is extracted each time the executable binary is launched. This is typically used to create a single binary that contains everything (for instance for an installer).<br>You should keep it as small as possible for good performances.
EMBEDDEDJAR_CHECKBOX=Use an embedded jar
CLASSPATH_LABEL=Classpath
CLASSPATH_HELP=Specify here the classpath used by the java application.<p>You can select jar or zip files, but also directories of classes.
MINVERSION_LABEL=Minimum JVM Version
MINVERSION_HELP=Specify here the <b>minimum</b> java version that your application needs to run properly.<p>For instance, <tt>1.2</tt> or <tt>1.4.2</tt> should be fine.
MAXVERSION_LABEL=Maximum JVM Version
MAXVERSION_HELP=Specify here the <b>maximum</b> java version that your application needs to run properly.<p>Most of the time, you won't need to set anything here because Java ensure a very good backward compatibility. However, in some specific cases, you may need to target an older VM.<p><b>NOTE</b>: To limit your application to using JVM, say, 1.2, it is best to specify 1.2.999 as the maximum. This is because users may have a 1.2.x with x>0 installed (1.2 is equivalent to 1.2.0 for JSmooth).
MAINCLASS_LABEL=Main class
MAINCLASS_HELP=Choose the main class, among all the classes available in the classpath.
JVMBUNDLE_LABEL=JVM Bundle
JVMBUNDLE_CHECKBOX=Use a JVM bundled with your application
JVMBUNDLE_HELP=Use this option only if you intend to bundle a full JVM with your application distribution.<p>Bundling a JVM does <b>NOT</b> mean that the executable contains a JRE (which is a very bad idea), but rather installing a JRE as a sub-folder of your application (without the official Sun installer).<p>This option specifies the directory where JSmooth should be able to find a JRE directory containing bin and lib sub-directory.<p>For instance, people often distribute a Java Virtual Machine under a <tt>jre</tt> or a <tt>java</tt> sub-directory of their application root.
JVMSEARCH_LABEL=JVM Search Sequence
JVMSEARCH_HELP=This is where you can specify the order in which the JVM available are looked for.<p>The default is to search first in the Windows registry, then in standard environment variables, then in the system Path, then check if JView is installed.<p>The default should be fine for most users, but you can customize this search order by moving the elements up or down (preferred element are on top).
MAXMEMORY_LABEL=Maximum Memory
MAXMEMORY_HELP=The maximum memory that the JVM is allowed to allocate. The default depends on the JVM implementation, but a common value is 64MB or 128MB. One should typically change it to a higher number for applications that consume lot of memory.
UNIT_MB=MB
UNIT_KB=KB
UNIT_BYTE=B
INITIALMEMORY_LABEL=Initial Memory Allocation
INITIALMEMORY_HELP=JVMs often start with a small memory allocation.<p>If your application allocates a lot of memory during the startup, increasing the initial memory allocated by the VM can dramatically speed up the launch.
JAVAPROP_LABEL=Java Properties
JAVAPROP_HELP=You can specify environment variables that are passed to the Java Virtual Machine at launch time.<p>Such variables are are typically accessed with the <tt>System.getProperty()</tt> method.
JAVAPROP_DIALOG_TITLE=Java Property Edition
JAVAPROP_DIALOG_LABEL=Property
JAVAPROP_NAME=Name
JAVAPROP_VALUE=Value
JAVAPROP_DIALOG_HELP=Java properties are name/value pairs that are passed to the JVM, and are accessible by java applications using the <tt>System.getProperty()</tt> method.<p>Additionally, in the <tt>Value</tt> field, you can set specific values:<p><ul><li>Environment Variable: If you pass a string of the form <tt>%ENV%</tt> in the value field of the property, the wrappers will replace the string with the content of the ENV environment variable.<li>JSmooth can also makes some special variable accessible for your application: <tt>${EXECUTABLEPATH}</tt>, <tt>${EXECUTABLENAME}</tt>, <tt>${COMPUTERNAME}</tt>, <tt>${VMSELECTION}</tt>, <tt>${VMSPAWNTYPE}</tt>.<p>Please refer to the documentation for further details.
COMPILATION_DIALOG_TITLE=Compilation Dialog
#
# Misc texts
#
UNKNOWN_SKEL=Selected skeleton is unknown.
#
# GUI LABELS
#
GUI_LABEL_EXECUTABLE_SETTINGS=Executable Settings
GUI_LABEL_APPLICATION_SETTINGS=Application Settings
GUI_LABEL_EMBEDDEDJAR_SETTINGS=Embbeded jar settings
GUI_LABEL_JAVA_VERSION=Java version settings
GUI_LABEL_BUNDLEDJRE=JRE (if bundled with your application)
GUI_LABEL_MEMORYSETTINGS=Memory Settings

#
# SKELETON TEXTS
#
SKEL_CHOOSER_NONE=none
SKEL_AUTODOWNLOAD_PROPERTY_DESCRIPTION=This skeleton wraps <b>GUI applications</b>.<ul><li>No console I/O is displayed <li>If no Java VM is found, the wrapper asks the user to download and install a Java VM using Sun's Auto Download service.</ul> Arguments can be passed to the application (either use the JSmooth default argument mechanism, or create a shortcut with arguments).

SKEL_AUTODOWNLOAD_PROPERTY_MESSAGE_DESCRIPTION=When no JVM is found in the target computer, the user is prompted with the message defined below. Then, the default browser is launched with the URL defined here.
SKEL_AUTODOWNLOAD_PROPERTY_MESSAGE_LABEL=Message
SKEL_AUTODOWNLOAD_PROPERTY_DLURL_DESCRIPTION=The Sun's Auto Download URL for the JVM that should be downloaded by the wrapper when no JVM is found. Select the version of the JVM needed by your application. Select the highest possible version.
SKEL_AUTODOWNLOAD_PROPERTY_DLURL_LABEL=Java VM to download
#
SKEL_GENERIC_PROPERTY_SINGLEPROCESS_DESCRIPTION=The default behaviour is to launch the java application in a different (detached) process by invoking java[w].exe (or jre[w].exe, according to the version of the JVM). If you want to force the wrapper to launch the Java application in the same process than the exe, than select this option. <p> When this option is enabled, JSmooth locates the JVM.dll and instanciates it, resulting in the VM running in the same process than the jsmooth wrapper (only the wrapper appears in the process list of the computer).
SKEL_GENERIC_PROPERTY_SINGLEPROCESS_LABEL=Launch java app in the exe process
SKEL_GENERIC_PROPERTY_DEBUG_DESCRIPTION=Enable the jsmooth debug console.
SKEL_GENERIC_PROPERTY_DEBUG_LABEL=Debug console

#
SKEL_CUSTOMDOWNLOAD_DESCRIPTION=This skeleton wraps <b>GUI applications</b>.<ul> <li>No console I/O is displayed <li>If no Java VM is found, the user is proposed to download and execute a file from the web. <li>The URL that the wrapper uses to download a file when no JVM is found must be defined in the wrapper. The URL can point on a .exe, a .cab, or any other filetype. Please note that some enterprise firewalls filter executable files. </ul> Arguments can be passed to the application (either use the JSmooth default argument mechanism, or create a shortcut with arguments).
SKEL_CUSTOMDOWNLOAD_PROPERTY_MESSAGE_DESCRIPTION=When no JVM is found in the target computer, the user is prompted with the message defined below. Then, the default browser is launched with the URL defined here.
SKEL_CUSTOMDOWNLOAD_PROPERTY_MESSAGE_LABEL=Message
SKEL_CUSTOMDOWNLOAD_PROPERTY_URL_DESCRIPTION=URL of a file to download and execute. It must start with http://, https://, or ftp://...
SKEL_CUSTOMDOWNLOAD_PROPERTY_URL_LABEL=URL
#
SKEL_CONSOLEWRAPPER_DESCRIPTION=This skeleton wraps <b>console applications</b>. <ul> <li> Standard Input/Output and Error streams are available <li> If no Java VM is found, it displays a default message. </ul> Although it is designed for console application (i.e. launched from the command.com shell prompt), it can launch standard GUI application. In such a case, any output of the java application (from System.out or System.err) is displayed in the a DOS Console.

SKEL_CUSTOMWRAPPER_PROPERTY_MESSAGE_DESCRIPTION=When no JVM is found in the target computer, the following message is displayed on the console.
SKEL_CUSTOMWRAPPER_PROPERTY_MESSAGE_LABEL=Message

SKEL_CUSTOMWRAPPER_PROPERTY_KEYPRESS_DESCRIPTION=The wrapper waits for a keypress on the console when the application exits.
SKEL_CUSTOMWRAPPER_PROPERTY_KEYPRESS_LABEL=PressKey

SKEL_SIMPLEWRAPPER_DESCRIPTION=This skeleton wraps <b>GUI applications</b>.<ul>  <li>No console I/O is displayed <li>If no Java VM is found, it is able to display a configurable URL (typically to a java download page). </ul> Arguments can be passed to the application (either use the JSmooth default argument mechanism, or create a shortcut with arguments).
SKEL_SIMPLEWRAPPER_PROPERTY_MESSAGE_DESCRIPTION=When no JVM is found in the target computer, the user is prompted with the message defined below. Then, the default browser is launched with the URL defined here.
SKEL_SIMPLEWRAPPER_PROPERTY_MESSAGE_LABEL=Message
SKEL_SIMPLEWRAPPER_PROPERTY_URL_DESCRIPTION=If the user selects YES to the message prompted above, the default web browser is launched with this URL.
SKEL_SIMPLEWRAPPER_PROPERTY_URL_LABEL=URL
#

#
#
SKEL_WINSERVICE_DESCRIPTION=This skeleton wraps <b>Windows Services</b>.\
<ul><li>The wrapper is a standard Windows Service <li>The JVM is instanciated with the native DLL, which means that the service does not appear as a generic "java" process in the task list, but with the name of the executable <li>No console I/O is displayed, but a logfile is available <li>If no Java VM is found, a pop-up alert is displayed to the user. </ul> \
This wrapper turns your java application into a Windows service. The behaviour of this wrapper is very simple, the main class of your application is called when the service starts, and the application exits when the service is stopped. <p> When the application stops, a call to System.exit() is done by the wrapper, so that your program can save its state (if necessary) by using a shutdown hook (see <tt>Runtime.addShutdownHook()</tt>).
SKEL_WINSERVICE_NAME_LABEL=Service name
SKEL_WINSERVICE_NAME_DESCRIPTION=An internal name for the windows service. Its maximum length is 256 characters, and must not contain slash or backslash characters. This field is mandatory.
SKEL_WINSERVICE_DISPLAYNAME_LABEL=Display name
SKEL_WINSERVICE_DISPLAYNAME_DESCRIPTION=The name displayed for this service by user interface programs. If not set, the internal name is used.
SKEL_WINSERVICE_DESCRIPTION_LABEL=Description
SKEL_WINSERVICE_DESCRIPTION_DESCRIPTION=Specify here a description of the service, to be displayed by user interface programs.
SKEL_WINSERVICE_PROPERTY_MESSAGE_LABEL=JVM-not-found message
SKEL_WINSERVICE_PROPERTY_MESSAGE_DESCRIPTION=This message is displayed as an alert box to the user if no JVM is found on the user's computer. <p> This message is only displayed when the service starts, as the installation process does not required any JVM.
SKEL_WINSERVICE_AUTOSTART_LABEL=Autostart service
SKEL_WINSERVICE_AUTOSTART_DESCRIPTION=Enable this option to have the service started automatically at system startup. <p>If this option is disabled, the service must be started manually by the user.
SKEL_WINSERVICE_LOGFILE_LABEL=Logfile
SKEL_WINSERVICE_LOGFILE_DESCRIPTION=Specify here a name for the logfile of the service. This logfile is located in the same directory than the executable binary.
SKEL_WINSERVICE_INTERACTIVE_LABEL=Interactive service
SKEL_WINSERVICE_INTERACTIVE_DESCRIPTION=Enable this value if the service shall be allowed by Windows to operate interactions with the desktop. <p> For security reasons, Microsoft recommands to use a client-server approach to add a GUI to a service. <p> If this option is not enabled, the application will not be able to create windows or use the desktop. Note also that if your service starts at startup, the desktop may not be available.

#
GENERAL_CANTOPENFILE=The JSmooth application couldn't open the file specified
GENERAL_ERROR_LABEL=Error

JSMOOTH_WELCOME_SCREEN=<h1>JSmooth release @{VERSION}@ @{RELEASEINFO}@</h1>\
<h2>Thanks for using JSmooth!</h2>\
The JSmooth project is distributed under the terms of the Apache \
License Version 2.0. Please read the LICENSE file that \
comes with the package. Additional software bundled with JSmooth may come with their own license, please check.\
<ul> \
<li> For the latest news on JSmooth, visit the <a href="https://github.com/BisonSchweizAG/JSmooth/">GitHub web site</a> \
<li> You can find specific information on this version of JSmooth in either the <a href="README.md">README.md</a> or the <a href="Changelog.txt">Changelog</a>. \
<li> The documentation is available in <a href="docs/jsmooth-doc.html">HTML</a> and <a href="docs/jsmooth-doc.pdf">PDF</a> format. \
<li> Some wrappers also provide a <a href="docs/jniapi/index.html">JSmooth JNI API</a> to access Windows-specific function from your java program. \
</ul><h2>JSmooth Support</h2> \
Should you have any question or find a bug, please use <a href="https://github.com/BisonSchweizAG/JSmooth/issues">the issue tracker</a>.
#
#
SKEL_GENERIC_SINGLEINSTANCE=Single instance
SKEL_GENERIC_SINGLEINSTANCE_DESCRIPTION=When this option is enabled, only one instance of the application can run at any time. <p> If the instance of the application is running, it is requested to bring its window (if any) to the front.
#
SKEL_GENERIC_JNISMOOTH=Use JNISmooth classes
SKEL_GENERIC_JNISMOOTH_DESCRIPTION=When launched with JSmooth, your application can optionnally be provided the jsmooth.Native class, which offers functions that are not available from a standard JVM. If you don't use the jsmooth.Native class, you can leave this option disabled (although it won't harm).
